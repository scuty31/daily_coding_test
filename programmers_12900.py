# 2 x n 타일링
# https://school.programmers.co.kr/learn/courses/30/lessons/12900

"""
가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있다.
이 타일을 이용하여 세로의 길이가 2이고, 가로의 길이가 n인 바닥을 가득 채우려고 한다.
타일은 가로로 배치할 수 있고, 세로로 배치할 수 있다.

직사각형을 채우는 방법의 수를 1,000,000,007으로 나눈 나머지를 return 하여라.
"""

"""
dp를 이용한다.
dp를 이용하여 n이 1, 2, 3, 4, ..., n 까지 가능한 경우의 수를 구한다.

n이 1이면 가능한 경우의 수는 1이다.
n이 2이면 가능한 경우의 수는 2이다.
n이 3이면 가능한 경우의 수는 3이다.
n이 4이면 가능한 경우의 수는 5이다.
n이 5이면 가능한 경우의 수는 8이다.
n이 n이면 가능한 경우의 수는 n-2의 경우의 수 + n-1의 경우의 수가 된다.

이를 이용하면 가로의 길이가 n인 바닥을 가득 채우는 방법의 수를 구할 수 있다. 
"""


def solution(n):
    dp = [0] * (n+1)

    # n이 3보다 큰 경우에만 점화식을 사용할 수 있다.
    # n이 1보다 큰 경우
    if n > 1:
        dp[1] = 1

    # n이 2보다 큰 경우
    if n > 2:
        dp[2] = 2

    # n이 3보다 큰 경우
    if n > 3:
        for i in range(3, n+1):
            dp[i] = (dp[i-2] + dp[i-1]) % 1000000007

    return dp[n]


n_ex = 5

print(solution(n_ex))